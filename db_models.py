from sqlalchemy import Column, Integer, Float, Date
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class WaterConsumption(Base):
    __tablename__ = 'water_consumption'

    Date = Column(Date, primary_key=True)
    River = Column(Float)
    Process = Column(Float)
    Drinking = Column(Float)
    Finishing_Return = Column(Float)
    Piece_Dying_Return = Column(Float)
    Total_Return = Column(Float)
    Drinking_School = Column(Float)
    ETP = Column(Float)
    Weaving = Column(Float)
    Old_Finishing = Column(Float)
    New_Finishing = Column(Float)
    Total_FSG = Column(Float)
    Piece_Dyeing = Column(Float)
    Dyeing = Column(Float)
    Wool_Scoring = Column(Float)
    Folding = Column(Float)
    Recombing = Column(Float)
    Drinking_RO = Column(Float)
    Spinning = Column(Float)
    Boiler = Column(Float)
    Engg_Drinking = Column(Float)
    Grey_Combing = Column(Float)
    Regeneration = Column(Float)
    Total_Process_Return = Column(Float)
    All_Process_Total = Column(Float)
    Canteen = Column(Float)
    Run_Hr_M_Small_Pump = Column(Float)
    Run_Hr_M_Big_Pump = Column(Float)
    Rain_Water_KL_Small_Pump = Column(Float)
    Rain_Water_KL_Big_Pump = Column(Float)
    Total_Rain_Water_KL = Column(Float)
    C = Column(Float)
    D = Column(Float)
    Opening = Column(Float)
    Salt_Consumption = Column(Float)
    Salt_Balance = Column(Float)
    Alum_Bricks_Stock = Column(Float)
    Con_Balance = Column(Float)
    Powder_Consumption = Column(Float)
    Powder_Balance = Column(Float)
    Utility = Column(Float)
    Production = Column(Float)
    Diff = Column(Float)
    Hardness = Column(Float)
    TDS = Column(Float)

    def __repr__(self):
        return f'<WaterConsumption(Date={self.Date}, Total={self.Total}, Process={self.Process})>'
